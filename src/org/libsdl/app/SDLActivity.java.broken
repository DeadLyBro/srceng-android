/*
 * Decompiled with CFR 0_118.
 * 
 * Could not load the following classes:
 *  android.app.Activity
 *  android.app.Application
 *  android.content.Context
 *  android.content.res.AssetManager
 *  android.media.AudioTrack
 *  android.opengl.EGL14
 *  android.opengl.EGLConfig
 *  android.opengl.EGLContext
 *  android.opengl.EGLDisplay
 *  android.opengl.EGLSurface
 *  android.os.Build
 *  android.os.Build$VERSION
 *  android.os.Bundle
 *  android.os.Handler
 *  android.os.IBinder
 *  android.os.Message
 *  android.util.Log
 *  android.view.MotionEvent
 *  android.view.View
 *  android.view.ViewGroup
 *  android.view.ViewGroup$LayoutParams
 *  android.view.inputmethod.InputMethodManager
 *  android.widget.AbsoluteLayout
 *  android.widget.AbsoluteLayout$LayoutParams
 *  android.widget.FrameLayout
 */
package org.libsdl.app;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.res.AssetManager;
import android.media.AudioTrack;
import android.opengl.EGL14;
import android.opengl.EGLConfig;
import android.opengl.EGLContext;
import android.opengl.EGLDisplay;
import android.opengl.EGLSurface;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AbsoluteLayout;
import android.widget.FrameLayout;
import org.libsdl.app.DummyEdit;
import org.libsdl.app.SDLMain;
import org.libsdl.app.SDLSurface;

public class SDLActivity
extends Activity {
    static final int COMMAND_CHANGE_TITLE = 1;
    static final int COMMAND_TEXTEDIT_HIDE = 3;
    static final int COMMAND_UNUSED = 2;
    protected static final int COMMAND_USER = 32768;
    private static final String TAG = "SDL";
    private static Thread mAudioThread;
    private static AudioTrack mAudioTrack;
    private static EGLConfig mEGLConfig;
    private static EGLContext mEGLContext;
    private static EGLDisplay mEGLDisplay;
    private static EGLSurface mEGLSurface;
    private static int mGLMajor;
    private static int mGLMinor;
    public static boolean mHasFocus;
    public static boolean mIsPaused;
    public static boolean mIsSurfaceReady;
    private static ViewGroup mLayout;
    private static Thread mSDLThread;
    private static SDLActivity mSingleton;
    private static SDLSurface mSurface;
    private static View mTextEdit;
    Handler commandHandler = new SDLCommandHandler();

    static {
        mIsPaused = false;
        mIsSurfaceReady = false;
        mHasFocus = true;
        mEGLContext = null;
        System.loadLibrary("SDL2");
        System.loadLibrary("main");
    }

    /*
     * Enabled aggressive block sorting
     */
    public static void audioInit(int n, boolean bl, boolean bl2, int n2) {
        int n3 = bl2 ? 3 : 2;
        int n4 = bl ? 2 : 3;
        int n5 = bl2 ? 2 : 1;
        int n6 = bl ? 2 : 1;
        StringBuilder stringBuilder = new StringBuilder().append("SDL audio: wanted ");
        String string2 = bl2 ? "stereo" : "mono";
        stringBuilder = stringBuilder.append(string2).append(" ");
        string2 = bl ? "16-bit" : "8-bit";
        Log.v((String)"SDL", (String)stringBuilder.append(string2).append(" ").append((float)n / 1000.0f).append("kHz, ").append(n2).append(" frames buffer").toString());
        n2 = Math.max(n2, (AudioTrack.getMinBufferSize((int)n, (int)n3, (int)n4) + n5 - 1) / (n5 *= n6));
        mAudioTrack = new AudioTrack(3, n, n3, n4, n2 * n5, 1);
        SDLActivity.audioStartThread();
        stringBuilder = new StringBuilder().append("SDL audio: got ");
        string2 = mAudioTrack.getChannelCount() >= 2 ? "stereo" : "mono";
        stringBuilder = stringBuilder.append(string2).append(" ");
        string2 = mAudioTrack.getAudioFormat() == 2 ? "16-bit" : "8-bit";
        Log.v((String)"SDL", (String)stringBuilder.append(string2).append(" ").append((float)mAudioTrack.getSampleRate() / 1000.0f).append("kHz, ").append(n2).append(" frames buffer").toString());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    public static void audioQuit() {
        if (mAudioThread != null) {
            try {
                mAudioThread.join();
            }
            catch (Exception var0) {
                Log.v((String)"SDL", (String)("Problem stopping audio thread: " + var0));
            }
            mAudioThread = null;
        }
        if (mAudioTrack != null) {
            mAudioTrack.stop();
            mAudioTrack = null;
        }
    }

    public static void audioStartThread() {
        mAudioThread = new Thread(new Runnable(){

            @Override
            public void run() {
                mAudioTrack.play();
                SDLActivity.nativeRunAudioThread();
            }
        });
        mAudioThread.setPriority(10);
        mAudioThread.start();
    }

    public static void audioWriteByteBuffer(byte[] arrby) {
        int n = 0;
        while (n < arrby.length) {
            int n2 = mAudioTrack.write(arrby, n, arrby.length - n);
            if (n2 > 0) {
                n += n2;
                continue;
            }
            if (n2 == 0) {
                try {
                    Thread.sleep(1);
                }
                catch (InterruptedException var3_3) {}
                continue;
            }
            Log.w((String)"SDL", (String)"SDL audio: error return from write(byte)");
            break;
        }
    }

    public static void audioWriteShortBuffer(short[] arrs) {
        int n = 0;
        while (n < arrs.length) {
            int n2 = mAudioTrack.write(arrs, n, arrs.length - n);
            if (n2 > 0) {
                n += n2;
                continue;
            }
            if (n2 == 0) {
                try {
                    Thread.sleep(1);
                }
                catch (InterruptedException var3_3) {}
                continue;
            }
            Log.w((String)"SDL", (String)"SDL audio: error return from write(short)");
            break;
        }
    }

    /*
     * Enabled aggressive block sorting
     */
    public static boolean createEGLContext() {
        int[] arrn = new int[]{12440, mGLMajor, 12344};
        EGLDisplay eGLDisplay = mEGLDisplay;
        EGLConfig eGLConfig = mEGLConfig;
        EGLContext eGLContext = EGL14.EGL_NO_CONTEXT;
        if (mGLMajor > 2) {
            arrn = new int[]{12344};
        }
        if ((SDLActivity.mEGLContext = EGL14.eglCreateContext((EGLDisplay)eGLDisplay, (EGLConfig)eGLConfig, (EGLContext)eGLContext, (int[])arrn, (int)0)) == EGL14.EGL_NO_CONTEXT) {
            Log.e((String)"SDL", (String)"Couldn't create context");
            return false;
        }
        return true;
    }

    public static boolean createEGLSurface() {
        if (mEGLDisplay != null && mEGLConfig != null) {
            EGLSurface eGLSurface;
            if (mEGLContext == null) {
                SDLActivity.createEGLContext();
            }
            if ((eGLSurface = EGL14.eglCreateWindowSurface((EGLDisplay)mEGLDisplay, (EGLConfig)mEGLConfig, (Object)((Object)mSurface), (int[])new int[]{12344}, (int)0)) == EGL14.EGL_NO_SURFACE) {
                Log.e((String)"SDL", (String)"Couldn't create surface");
                return false;
            }
            if (EGL14.eglGetCurrentContext() != mEGLContext && !EGL14.eglMakeCurrent((EGLDisplay)mEGLDisplay, (EGLSurface)eGLSurface, (EGLSurface)eGLSurface, (EGLContext)mEGLContext)) {
                Log.e((String)"SDL", (String)"Old EGL Context doesnt work, trying with a new one");
                SDLActivity.createEGLContext();
                if (!EGL14.eglMakeCurrent((EGLDisplay)mEGLDisplay, (EGLSurface)eGLSurface, (EGLSurface)eGLSurface, (EGLContext)mEGLContext)) {
                    Log.e((String)"SDL", (String)"Failed making EGL Context current");
                    return false;
                }
            }
            mEGLSurface = eGLSurface;
            return true;
        }
        Log.e((String)"SDL", (String)("Surface creation failed, display = " + (Object)mEGLDisplay + ", config = " + (Object)mEGLConfig));
        return false;
    }

    public static boolean createGLContext(int n, int n2, int[] arrn) {
        return SDLActivity.initEGL(n, n2, arrn);
    }

    public static void flipBuffers() {
        SDLActivity.flipEGL();
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    public static void flipEGL() {
        try {
            EGL14.eglWaitNative((int)12379);
            EGL14.eglWaitGL();
            EGL14.eglSwapBuffers((EGLDisplay)mEGLDisplay, (EGLSurface)mEGLSurface);
            return;
        }
        catch (Exception var2) {
            Log.v((String)"SDL", (String)("flipEGL(): " + var2));
            StackTraceElement[] arrstackTraceElement = var2.getStackTrace();
            int n = arrstackTraceElement.length;
            int n2 = 0;
            while (n2 < n) {
                Log.v((String)"SDL", (String)arrstackTraceElement[n2].toString());
                ++n2;
            }
            return;
        }
    }

    public static Context getContext() {
        return mSingleton;
    }

    public static void handlePause() {
        if (!mIsPaused && mIsSurfaceReady) {
            mIsPaused = true;
            SDLActivity.nativePause();
            mSurface.enableSensor(1, false);
        }
    }

    public static void handleResume() {
        if (mIsPaused && mIsSurfaceReady && mHasFocus) {
            mIsPaused = false;
            SDLActivity.nativeResume();
            mSurface.enableSensor(1, true);
        }
    }

    public static native void initAssetManager(AssetManager var0);

    /*
     * Unable to fully structure code
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     * Lifted jumps to return sites
     */
    public static boolean initEGL(int var0, int var1_1, int[] var2_2) {
        var2_2 = "Debug-infos:" + "\n OS Version: " + System.getProperty("os.version") + "(" + Build.VERSION.INCREMENTAL + ")";
        var2_2 = (String)var2_2 + "\n OS API Level: " + Build.VERSION.SDK;
        var2_2 = (String)var2_2 + "\n Device: " + Build.DEVICE;
        (String)var2_2 + "\n Model (and Product): " + Build.MODEL + " (" + Build.PRODUCT + ")";
        try {
            var4_5 = System.getenv("USE_BIG_GL");
            var2_2 = var4_5;
            if (var4_5 == null) {
                var2_2 = "0";
            }
            Log.v((String)"SDL", (String)("USE_BIG_GL = " + (String)var2_2));
            var3_6 = var2_2.equals("1");
            if (SDLActivity.mEGLDisplay != null || !var3_6) ** GOTO lbl39
            Log.v((String)"SDL", (String)"Attempting to create Big GL Context");
            var2_2 = EGL14.eglGetDisplay((int)0);
            EGL14.eglBindAPI((int)12450);
            var4_5 = new int[2];
            EGL14.eglInitialize((EGLDisplay)var2_2, (int[])var4_5, (int)0, (int[])var4_5, (int)1);
            var4_5 = new EGLConfig[1];
            var5_7 = new int[1];
        }
        catch (Exception var2_3) {
            Log.v((String)"SDL", (String)(var2_3 + ""));
            var2_4 = var2_3.getStackTrace();
            var1_1 = var2_4.length;
            var0 = 0;
            while (var0 < var1_1) {
                Log.v((String)"SDL", (String)var2_4[var0].toString());
                ++var0;
            }
            return false;
        }
        if (EGL14.eglChooseConfig((EGLDisplay)var2_2, (int[])new int[]{12339, 4, 12352, 8, 12324, 8, 12323, 8, 12322, 8, 12325, 24, 12326, 8, 12344}, (int)0, (EGLConfig[])var4_5, (int)0, (int)1, (int[])var5_7, (int)0) && var5_7[0] != 0) ** GOTO lbl34
        Log.v((String)"SDL", (String)"No EGL config available for Big GL");
        return false;
lbl34: // 1 sources:
        SDLActivity.mEGLDisplay = var2_2;
        SDLActivity.mEGLConfig = var4_5[0];
        SDLActivity.mGLMajor = 4;
        SDLActivity.mGLMinor = 0;
        return SDLActivity.createEGLSurface();
lbl39: // 1 sources:
        Log.v((String)"SDL", (String)("Starting up OpenGL ES " + var0 + "." + var1_1));
        var2_2 = EGL14.eglGetDisplay((int)0);
        var4_5 = new int[2];
        EGL14.eglInitialize((EGLDisplay)var2_2, (int[])var4_5, (int)0, (int[])var4_5, (int)1);
        var4_5 = new EGLConfig[1];
        var5_7 = new int[1];
        if (EGL14.eglChooseConfig((EGLDisplay)var2_2, (int[])new int[]{12339, 4, 12352, 4, 12324, 8, 12323, 8, 12322, 8, 12325, 24, 12326, 8, 12344}, (int)0, (EGLConfig[])var4_5, (int)0, (int)1, (int[])var5_7, (int)0) && var5_7[0] != 0) ** GOTO lbl49
        Log.e((String)"SDL", (String)"No EGL config available");
        return false;
lbl49: // 1 sources:
        SDLActivity.mEGLDisplay = var2_2;
        SDLActivity.mEGLConfig = var4_5[0];
        SDLActivity.mGLMajor = var0;
        SDLActivity.mGLMinor = var1_1;
        return SDLActivity.createEGLSurface();
    }

    public static native void nativeInit();

    public static native void nativePause();

    public static native void nativeQuit();

    public static native void nativeResume();

    public static native void nativeRunAudioThread();

    public static native void onNativeAccel(float var0, float var1, float var2);

    public static native void onNativeJoystickAxis(int var0, float var1);

    public static native void onNativeJoystickHat(int var0, int var1);

    public static native void onNativeKeyDown(int var0);

    public static native void onNativeKeyUp(int var0);

    public static native void onNativeResize(int var0, int var1, int var2);

    public static native void onNativeSurfaceChanged();

    public static native void onNativeSurfaceDestroyed();

    public static native void onNativeTouch(int var0, int var1, int var2, float var3, float var4, float var5);

    public static void quit() {
        mSingleton.finish();
        System.exit(0);
    }

    public static boolean sendMessage(int n, int n2) {
        return mSingleton.sendCommand(n, n2);
    }

    public static boolean setActivityTitle(String string2) {
        return mSingleton.sendCommand(1, string2);
    }

    public static boolean showTextInput(int n, int n2, int n3, int n4) {
        return SDLActivity.mSingleton.commandHandler.post((Runnable)new ShowTextInputTask(n, n2, n3, n4));
    }

    /*
     * Enabled aggressive block sorting
     */
    public static void startApp() {
        if (mSDLThread == null) {
            mSDLThread = new Thread((Runnable)new SDLMain(), "SDLThread");
            mSDLThread.start();
            return;
        } else {
            if (!mIsPaused) return;
            {
                SDLActivity.nativeResume();
                mIsPaused = false;
                return;
            }
        }
    }

    public static void startSDL() {
        SDLActivity sDLActivity = mSingleton;
        mLayout = new FrameLayout((Context)mSingleton);
        sDLActivity = mSingleton;
        mSurface = new SDLSurface((Context)mSingleton.getApplication());
        sDLActivity = mSingleton;
        sDLActivity = mLayout;
        SDLActivity sDLActivity2 = mSingleton;
        sDLActivity.addView((View)mSurface);
        sDLActivity = mSingleton;
        sDLActivity2 = mSingleton;
        sDLActivity.setContentView((View)mLayout);
    }

    /*
     * Enabled aggressive block sorting
     */
    public boolean dispatchGenericMotionEvent(MotionEvent motionEvent) {
        if ((motionEvent.getSource() & 8194) != 0) {
            return false;
        }
        if ((motionEvent.getSource() & 16) != 0) {
            SDLActivity.onNativeJoystickAxis(0, motionEvent.getAxisValue(0));
            SDLActivity.onNativeJoystickAxis(1, motionEvent.getAxisValue(1));
            SDLActivity.onNativeJoystickAxis(3, motionEvent.getAxisValue(14));
            SDLActivity.onNativeJoystickAxis(4, motionEvent.getAxisValue(11));
            SDLActivity.onNativeJoystickAxis(2, Math.max(motionEvent.getAxisValue(17), motionEvent.getAxisValue(23)));
            SDLActivity.onNativeJoystickAxis(5, Math.max(motionEvent.getAxisValue(18), motionEvent.getAxisValue(22)));
            int n = 0;
            int n2 = (int)motionEvent.getAxisValue(15);
            int n3 = (int)motionEvent.getAxisValue(16);
            if (n2 == 1) {
                n = 0 | 2;
            } else if (n2 == -1) {
                n = 0 | 8;
            }
            if (n3 == 1) {
                n2 = n | 4;
            } else {
                n2 = n;
                if (n3 == -1) {
                    n2 = n | 1;
                }
            }
            SDLActivity.onNativeJoystickHat(0, n2);
        }
        return super.dispatchGenericMotionEvent(motionEvent);
    }

    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        mSingleton = this;
        SDLActivity.initAssetManager(this.getAssets());
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    protected void onDestroy() {
        super.onDestroy();
        SDLActivity.nativeQuit();
        if (mSDLThread != null) {
            try {
                mSDLThread.join();
            }
            catch (Exception var1_1) {
                Log.v((String)"SDL", (String)("Problem stopping thread: " + var1_1));
            }
            mSDLThread = null;
        }
    }

    protected void onPause() {
        super.onPause();
        SDLActivity.handlePause();
        if (mAudioTrack != null) {
            mAudioTrack.flush();
            mAudioTrack.pause();
        }
    }

    protected void onResume() {
        super.onResume();
        SDLActivity.handleResume();
        if (mAudioTrack != null) {
            mAudioTrack.play();
        }
    }

    protected boolean onUnhandledMessage(int n, Object object) {
        return false;
    }

    public void onWindowFocusChanged(boolean bl) {
        super.onWindowFocusChanged(bl);
        mHasFocus = bl;
        if (bl) {
            SDLActivity.handleResume();
        }
    }

    boolean sendCommand(int n, Object object) {
        Message message = this.commandHandler.obtainMessage();
        message.arg1 = n;
        message.obj = object;
        return this.commandHandler.sendMessage(message);
    }

    protected static class SDLCommandHandler
    extends Handler {
        protected SDLCommandHandler() {
        }

        /*
         * Enabled aggressive block sorting
         */
        public void handleMessage(Message message) {
            Context context = SDLActivity.getContext();
            if (context == null) {
                Log.e((String)"SDL", (String)"error handling message, getContext() returned null");
                return;
            } else {
                switch (message.arg1) {
                    default: {
                        if (!(context instanceof SDLActivity) || ((SDLActivity)context).onUnhandledMessage(message.arg1, message.obj)) return;
                        Log.e((String)"SDL", (String)("error handling message, command is " + message.arg1));
                        return;
                    }
                    case 1: {
                        if (context instanceof Activity) {
                            ((Activity)context).setTitle((CharSequence)((String)message.obj));
                            return;
                        }
                        Log.e((String)"SDL", (String)"error handling message, getContext() returned no Activity");
                        return;
                    }
                    case 3: {
                        if (mTextEdit == null) return;
                        mTextEdit.setVisibility(8);
                        ((InputMethodManager)context.getSystemService("input_method")).hideSoftInputFromWindow(mTextEdit.getWindowToken(), 0);
                        return;
                    }
                }
            }
        }
    }

    static class ShowTextInputTask
    implements Runnable {
        static final int HEIGHT_PADDING = 15;
        public int h;
        public int w;
        public int x;
        public int y;

        public ShowTextInputTask(int n, int n2, int n3, int n4) {
            this.x = n;
            this.y = n2;
            this.w = n3;
            this.h = n4;
        }

        /*
         * Enabled aggressive block sorting
         */
        @Override
        public void run() {
            AbsoluteLayout.LayoutParams layoutParams = new AbsoluteLayout.LayoutParams(this.w, this.h + 15, this.x, this.y);
            if (mTextEdit == null) {
                mTextEdit = new DummyEdit(SDLActivity.getContext());
                mLayout.addView(mTextEdit, (ViewGroup.LayoutParams)layoutParams);
            } else {
                mTextEdit.setLayoutParams((ViewGroup.LayoutParams)layoutParams);
            }
            mTextEdit.setVisibility(0);
            mTextEdit.requestFocus();
            ((InputMethodManager)SDLActivity.getContext().getSystemService("input_method")).showSoftInput(mTextEdit, 0);
        }
    }

}

