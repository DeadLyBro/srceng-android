/*
 * Decompiled with CFR 0_118.
 * 
 * Could not load the following classes:
 *  android.app.ActivityManager
 *  android.app.ActivityManager$MemoryInfo
 *  android.app.AlertDialog
 *  android.app.AlertDialog$Builder
 *  android.app.PendingIntent
 *  android.content.BroadcastReceiver
 *  android.content.ComponentName
 *  android.content.Context
 *  android.content.DialogInterface
 *  android.content.DialogInterface$OnClickListener
 *  android.content.Intent
 *  android.content.IntentFilter
 *  android.content.SharedPreferences
 *  android.content.pm.PackageManager
 *  android.content.pm.PackageManager$NameNotFoundException
 *  android.content.res.AssetManager
 *  android.os.Bundle
 *  android.os.Messenger
 *  android.util.Log
 *  android.view.InputDevice
 *  android.view.View
 *  android.view.Window
 */
package com.valvesoftware;

import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.os.Bundle;
import android.os.Messenger;
import android.util.Log;
import android.view.InputDevice;
import android.view.View;
import android.view.Window;
import com.apkmania.apkmania;
import com.google.android.vending.expansion.downloader.DownloadProgressInfo;
import com.google.android.vending.expansion.downloader.DownloaderClientMarshaller;
import com.google.android.vending.expansion.downloader.DownloaderServiceMarshaller;
import com.google.android.vending.expansion.downloader.Helpers;
import com.google.android.vending.expansion.downloader.IDownloaderClient;
import com.google.android.vending.expansion.downloader.IDownloaderService;
import com.google.android.vending.expansion.downloader.IStub;
import com.nvidia.PowerServiceClient;
import com.valvesoftware.ValveCustomDownloaderService;
import com.valvesoftware.ValveDownloader;
import com.valvesoftware.ValveDownloaderService;
import com.valvesoftware.ValveSplashScreen;
import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import org.libsdl.app.SDLActivity;

public class ValveActivity
extends SDLActivity
implements IDownloaderClient {
    private static ValveActivity mSingleton;
    private static boolean mUseGooglePlayDownloader;
    private BroadcastReceiver mCustomDownloaderReceiverProgress;
    private BroadcastReceiver mCustomDownloaderReceiverStatus;
    private int mDataVersion;
    private IStub mDownloaderClientStub;
    private ValveDownloader mDownloaderView;
    private long mMainDataSize;
    private long mPatchDataSize;
    private PowerServiceClient mPowerServiceClient;
    private Thread mPreLoadThread;
    private IDownloaderService mRemoteService;

    static {
        mUseGooglePlayDownloader = false;
    }

    public ValveActivity() {
        this.mCustomDownloaderReceiverStatus = new BroadcastReceiver(){

            public void onReceive(Context context, Intent intent) {
                context = intent.getExtras();
                if (context != null) {
                    int n = context.getInt("status");
                    Log.v((String)"mCustomDownloaderReceiverStatus", (String)("status = " + n));
                    mSingleton.onDownloadStateChanged(n);
                }
            }
        };
        this.mCustomDownloaderReceiverProgress = new BroadcastReceiver(){

            public void onReceive(Context context, Intent intent) {
                context = intent.getExtras();
                if (context != null) {
                    long l = context.getLong("bytes_total");
                    long l2 = context.getLong("bytes_downloaded");
                    ValveActivity.this.mDownloaderView.updateProgress(l2, l);
                }
            }
        };
    }

    private boolean checkDownloadRequired() {
        boolean bl = false;
        int n = this.mDataVersion;
        long l = this.mMainDataSize;
        long l2 = this.mPatchDataSize;
        Log.v((String)"ValveActivity", (String)("checkDownloadRequired(" + n + ", " + l + ", " + l2 + ")"));
        String string2 = Helpers.getExpansionAPKFileName((Context)this, true, n);
        String string3 = Helpers.getExpansionAPKFileName((Context)this, false, n);
        ValveActivity.setMainPackFilePath(Helpers.generateSaveFileName((Context)this, string2));
        ValveActivity.setPatchPackFilePath(Helpers.generateSaveFileName((Context)this, string3));
        if (!Helpers.doesFileExist((Context)this, string2, l, false) || !Helpers.doesFileExist((Context)this, string3, l2, false)) {
            bl = true;
        }
        return bl;
    }

    /*
     * Enabled force condition propagation
     * Lifted jumps to return sites
     */
    private void finishPreload() {
        if (this.mPreLoadThread == null) return;
        try {
            this.mPreLoadThread.join();
            this.mPreLoadThread = null;
            return;
        }
        catch (Exception var1_1) {
            Log.e((String)"ValveActivity", (String)("Join failed: " + var1_1));
            return;
        }
    }

    private boolean isGameControllerConnected() {
        int[] arrn = InputDevice.getDeviceIds();
        int n = arrn.length;
        for (int i = 0; i < n; ++i) {
            int n2 = InputDevice.getDevice((int)arrn[i]).getSources();
            if ((n2 & 1025) != 1025 && (n2 & 16777232) != 16777232) continue;
            return true;
        }
        return false;
    }

    public static void pauseDownload() {
        ValveActivity valveActivity = mSingleton;
        if (mUseGooglePlayDownloader && mSingleton != null && ValveActivity.mSingleton.mRemoteService != null) {
            Log.v((String)"ValveActivity", (String)"pauseDownload()");
            ValveActivity.mSingleton.mRemoteService.requestPauseDownload();
        }
    }

    public static void resumeDownload() {
        ValveActivity valveActivity = mSingleton;
        if (mUseGooglePlayDownloader) {
            if (mSingleton != null && ValveActivity.mSingleton.mRemoteService != null) {
                Log.v((String)"ValveActivity", (String)"resumeDownload()");
                ValveActivity.mSingleton.mRemoteService.requestContinueDownload();
            }
            return;
        }
        mSingleton.startCustomDownloader();
    }

    public static void retryDownload() {
        ValveActivity valveActivity = mSingleton;
        if (mUseGooglePlayDownloader) {
            ValveActivity.resumeDownload();
            return;
        }
        mSingleton.startCustomDownloader();
    }

    public static native void saveGame();

    public static native void setCacheDirectoryPath(String var0);

    public static native void setDocumentDirectoryPath(String var0);

    public static native void setDropMip(int var0);

    public static native void setMainPackFilePath(String var0);

    public static native void setPatchPackFilePath(String var0);

    private void startCustomDownloader() {
        Object object = new HashMap<String, String>();
        object.put((String)"com.nvidia.valvesoftware.halflife2", (String)"http://download.nvidia.com/tegrazone/payload/valve/halflife2/");
        object.put((String)"com.nvidia.valvesoftware.halflife2ep1", (String)"http://download.nvidia.com/tegrazone/payload/valve/halflife2ep1/");
        object.put((String)"com.nvidia.valvesoftware.halflife2ep2", (String)"http://download.nvidia.com/tegrazone/payload/valve/halflife2ep2/");
        object.put((String)"com.nvidia.valvesoftware.portal", (String)"http://download.nvidia.com/tegrazone/payload/valve/portal/");
        String string2 = Helpers.getSaveFilePath((Context)this);
        String string3 = Helpers.getExpansionAPKFileName((Context)this, true, this.mDataVersion);
        String string4 = Helpers.getExpansionAPKFileName((Context)this, false, this.mDataVersion);
        String string5 = (String)object.get(this.getPackageName());
        if (string5.length() == 0) {
            Log.e((String)"ValveActivity", (String)("unable to retrieve prefix for package " + this.getPackageName()));
        }
        object = string5 + string3;
        string5 = string5 + string4;
        Log.v((String)"ValveActivity", (String)("startCustomDownloader obbRoot      = " + string2));
        Log.v((String)"ValveActivity", (String)("startCustomDownloader mainName     = " + string3));
        Log.v((String)"ValveActivity", (String)("startCustomDownloader patchName    = " + string4));
        Intent intent = new Intent((Context)this, ValveCustomDownloaderService.class);
        intent.putExtra("obb_root", string2);
        intent.putExtra("main_name", string3);
        intent.putExtra("main_url", (String)object);
        intent.putExtra("main_size", this.mMainDataSize);
        intent.putExtra("patch_name", string4);
        intent.putExtra("patch_url", string5);
        intent.putExtra("patch_size", this.mPatchDataSize);
        this.startService(intent);
        this.mDownloaderView = new ValveDownloader((Context)this);
        this.setContentView((View)this.mDownloaderView);
    }

    public static void startDownloader() {
        if (!mSingleton.checkDownloadRequired()) {
            ValveActivity.startVideo();
            return;
        }
        if (mUseGooglePlayDownloader) {
            mSingleton.startGooglePlayDownloader();
            return;
        }
        mSingleton.startCustomDownloader();
    }

    public static void startGame() {
        mSingleton.finishPreload();
        ValveActivity.startSDL();
        if (ValveActivity.mSingleton.mPowerServiceClient != null) {
            int[] arrn = new int[]{};
            ValveActivity.mSingleton.mPowerServiceClient.sendPowerHint(6, arrn);
            ValveActivity.mSingleton.mPowerServiceClient.sendPowerHint(2, arrn);
            ValveActivity.mSingleton.mPowerServiceClient.sendPowerHint(12, arrn);
        }
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    private void startGooglePlayDownloader() {
        try {
            Object object = this.getIntent();
            Intent intent = new Intent((Context)this, this.getClass());
            intent.setFlags(335544320);
            intent.setAction(object.getAction());
            if (object.getCategories() != null) {
                object = object.getCategories().iterator();
                while (object.hasNext()) {
                    intent.addCategory((String)object.next());
                }
            }
            int n = DownloaderClientMarshaller.startDownloadServiceIfRequired((Context)this, PendingIntent.getActivity((Context)this, (int)0, (Intent)intent, (int)134217728), ValveDownloaderService.class);
            Log.v((String)"ValveActivity", (String)("startResult = " + n));
            if (n == 0) {
                ValveActivity.startVideo();
                return;
            }
        }
        catch (PackageManager.NameNotFoundException var2_3) {
            Log.e((String)"ValveActivity", (String)"Cannot find own package!");
            return;
        }
        this.mDownloaderClientStub = DownloaderClientMarshaller.CreateStub(this, ValveDownloaderService.class);
        this.mDownloaderView = new ValveDownloader((Context)this);
        this.setContentView((View)this.mDownloaderView);
        this.mDownloaderClientStub.connect((Context)this);
    }

    private void startPreload() {
        if (this.mPreLoadThread == null) {
            // empty if block
        }
    }

    public static void startVideo() {
        Log.v((String)"ValveActivity", (String)"startVideo");
        ValveSplashScreen valveSplashScreen = new ValveSplashScreen((Context)mSingleton, mSingleton.getAssets());
        mSingleton.setContentView((View)valveSplashScreen);
        if (ValveActivity.mSingleton.mDownloaderView != null) {
            ValveActivity.mSingleton.mDownloaderView = null;
        }
        mSingleton.startPreload();
    }

    protected void checkAndStart(int n, long l, long l2) {
        this.mDataVersion = n;
        this.mMainDataSize = l;
        this.mPatchDataSize = l2;
        if (this.isGameControllerConnected()) {
            ValveActivity.startDownloader();
            return;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder((Context)this);
        builder.setMessage((CharSequence)"This game requires a game controller. Please connect one now.");
        builder.setPositiveButton((CharSequence)"Ignore", new DialogInterface.OnClickListener(){

            public void onClick(DialogInterface dialogInterface, int n) {
                mSingleton;
                ValveActivity.startDownloader();
            }
        });
        builder.setNegativeButton((CharSequence)"Quit", new DialogInterface.OnClickListener(){

            public void onClick(DialogInterface dialogInterface, int n) {
                mSingleton.finish();
                System.exit(0);
            }
        });
        builder = builder.create();
        builder.setCanceledOnTouchOutside(false);
        builder.show();
    }

    @Override
    protected void onCreate(Bundle bundle) {
        if (this.getSharedPreferences("PREFERENCE", 0).getBoolean("ShowInfoBox", true)) {
            apkmania.createInfoBox((Context)this);
        }
        super.onCreate(bundle);
        this.getWindow().getDecorView().setSystemUiVisibility(5894);
        mSingleton = this;
        ValveActivity.setCacheDirectoryPath(this.getCacheDir().getAbsolutePath());
        ValveActivity.setDocumentDirectoryPath(this.getFilesDir().getAbsolutePath());
        bundle = new ActivityManager.MemoryInfo();
        ((ActivityManager)this.getSystemService("activity")).getMemoryInfo((ActivityManager.MemoryInfo)bundle);
        Log.v((String)"ValveActivity", (String)("Total System Memory     " + bundle.totalMem + " bytes"));
        Log.v((String)"ValveActivity", (String)("Available System Memory " + bundle.availMem + " bytes"));
    }

    @Override
    public void onDownloadProgress(DownloadProgressInfo downloadProgressInfo) {
        Log.v((String)"ValveActivity", (String)"onDownloadProgress()");
        this.mDownloaderView.updateProgress(downloadProgressInfo);
    }

    @Override
    public void onDownloadStateChanged(int n) {
        Log.v((String)"ValveActivity", (String)("onDownloadStateChanged(" + n + ")"));
        this.mDownloaderView.updateState(n);
    }

    /*
     * Enabled aggressive block sorting
     * Enabled unnecessary exception pruning
     * Enabled aggressive exception aggregation
     */
    @Override
    protected void onPause() {
        ValveActivity.saveGame();
        try {
            Thread.sleep(1000);
        }
        catch (Exception var1_1) {}
        super.onPause();
        this.unregisterReceiver(this.mCustomDownloaderReceiverStatus);
        this.unregisterReceiver(this.mCustomDownloaderReceiverProgress);
    }

    @Override
    protected void onResume() {
        if (this.mDownloaderClientStub != null) {
            this.mDownloaderClientStub.connect((Context)this);
        }
        super.onResume();
        this.registerReceiver(this.mCustomDownloaderReceiverStatus, new IntentFilter(this.getApplicationContext().getPackageName() + ".ValveCustomDownloaderService.STATUS"));
        this.registerReceiver(this.mCustomDownloaderReceiverProgress, new IntentFilter(this.getApplicationContext().getPackageName() + ".ValveCustomDownloaderService.PROGRESS"));
    }

    @Override
    public void onServiceConnected(Messenger messenger) {
        Log.v((String)"ValveActivity", (String)"onServiceConnected()");
        this.mRemoteService = DownloaderServiceMarshaller.CreateProxy(messenger);
        this.mRemoteService.onClientUpdated(this.mDownloaderClientStub.getMessenger());
    }

    protected void onStart() {
        if (this.mDownloaderClientStub != null) {
            this.mDownloaderClientStub.connect((Context)this);
        }
        super.onStart();
    }

    protected void onStop() {
        if (this.mDownloaderClientStub != null) {
            this.mDownloaderClientStub.disconnect((Context)this);
        }
        super.onStop();
    }

    class PreloadThread
    implements Runnable {
        PreloadThread() {
        }

        /*
         * Enabled force condition propagation
         * Lifted jumps to return sites
         */
        @Override
        public void run() {
            int n;
            int n2;
            Thread.sleep(2000);
            String[] arrstring = new String[]{"androidwrapper", "tier0", "vstdlib", "togl", "SDL2", "steam_api", "datacache", "engine", "filesystem_stdio", "GameUI", "inputsystem", "launcher", "materialsystem", "scenefilecache", "ServerBrowser", "soundemittersystem", "studiorender", "vguimatsurface", "video_services", "vphysics", "vgui2", "shaderapidx9", "stdshader_dx9", "client", "server"};
            try {
                n2 = arrstring.length;
                n = 0;
            }
            catch (Exception var3_2) {
                Log.e((String)"ValveActivity", (String)("Error loading library: " + var3_2));
            }
            while (n < n2) {
                String string2 = arrstring[n];
                Log.v((String)"ValveActivity", (String)("Loading " + string2 + "..."));
                System.loadLibrary(string2);
                ++n;
            }
            return;
        }
    }

}

